rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for auth checks
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
    function isStaff() {
      // 管理者はスタッフでもあるという前提
      return isSignedIn() && (request.auth.token.staff == true || request.auth.token.admin == true);
    }
    function isAdminOrStaff() {
      return isAdmin() || isStaff();
    }

    // ★★★ users コレクションのルールを最大限に緩和 (テスト目的) ★★★
    match /users/{userId} {
      allow read: if true;
      allow write: if true;
    }
    // ★★★ ここまで users のテスト用ルール ★★★

    match /drinkMenuItems/{itemId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /chipPurchaseOptions/{optionId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // ★★★ orders コレクションのルールを最大限に緩和 (テスト目的) ★★★
    match /orders/{orderId} {
      allow read: if true;  // 誰でも読み取り可能
      allow write: if true; // 誰でも書き込み可能
    }
    // ★★★ ここまで orders のテスト用ルール ★★★

    match /tables/{tableId} {
      allow read: if isSignedIn();
      allow write: if isAdminOrStaff();
      match /seats/{seatId} {
        allow read: if isSignedIn();
        allow write: if isAdminOrStaff();
      }
    }

    match /announcements/{announcementId} {
      allow get: if resource.data.isPublished == true || isAdmin();
      allow list: if isSignedIn(); // Client filters by isPublished
      allow write: if isAdmin();
    }

    match /withdrawalRequests/{requestId} {
      function isWithdrawalRequestOwner() { return isSignedIn() && request.auth.uid == resource.data.userId; }
      function isValidWithdrawalCreation(newData) {
        return isSignedIn() &&
               request.auth.uid == newData.userId &&
               newData.status == "pending_approval" &&
               newData.requestedChipsAmount is number && newData.requestedChipsAmount > 0 &&
               !newData.containsKey('requestedAt') && // Set by serverTimestamp in Function
               !newData.containsKey('updatedAt') &&   // Set by serverTimestamp in Function
               !newData.containsKey('adminProcessedAt') &&
               !newData.containsKey('adminDeliveredAt') &&
               !newData.containsKey('customerConfirmedAt') &&
               !newData.containsKey('processedBy') &&
               !newData.containsKey('notes');
      }
      allow create: if isValidWithdrawalCreation(request.resource.data);
      allow read: if isWithdrawalRequestOwner() || isAdminOrStaff();
      function canAdminOrStaffUpdateWithdrawal(currentData, newData) {
        let allowedFields = ['status', 'processedBy', 'adminProcessedAt', 'notes', 'adminDeliveredAt', 'updatedAt'];
        return isAdminOrStaff() &&
               newData.diff(currentData).affectedKeys().hasOnly(allowedFields) &&
               newData.userId == currentData.userId &&
               newData.requestedChipsAmount == currentData.requestedChipsAmount;
      }
      function canUserConfirmWithdrawal(currentData, newData) { // Primarily via Function
        return isOwner(currentData.userId) &&
               currentData.status == "delivered_awaiting_confirmation" &&
               newData.status == "completed" &&
               newData.diff(currentData).affectedKeys().hasOnly(['status', 'customerConfirmedAt', 'updatedAt']);
      }
      allow update: if canAdminOrStaffUpdateWithdrawal(resource.data, request.resource.data) ||
                      canUserConfirmWithdrawal(resource.data, request.resource.data);
      allow delete: if isAdmin();
    }

    match /gameTemplates/{templateId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // waitingListEntries のルール (前回テストで緩和した状態を維持 - 必要に応じて適切なルールに戻してください)
    match /waitingListEntries/{entryId} {
      allow read: if true;
      allow write: if true;
    }

    match /gameSessions/{sessionId} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdminOrStaff());
      allow update: if isAdminOrStaff();
      allow delete: if isAdmin();
    }
  }
}